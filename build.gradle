/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.2/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    mavenCentral()
}

ext {
    projectName = "hemleditor"
    osgi_platform = 'gtk.linux.x86_64'
    swt_version = '3.112.0'
}
if (org.gradle.internal.os.OperatingSystem.current().isWindows()) ext.osgi_platform = "win32.win32.x86_64"


configurations.all {
    resolutionStrategy {
        dependencySubstitution {
            // The maven property ${osgi.platform} is not handled by Gradle
            // so we replace the dependency, using the osgi platform from the project settings
            substitute module('org.eclipse.platform:org.eclipse.swt.${osgi.platform}') with module("org.eclipse.platform:org.eclipse.swt.$osgi_platform:$swt_version")
        }
    }
}

    
dependencies {
    implementation('org.eclipse.platform:org.eclipse.core.runtime:3.14.0')
    implementation('org.eclipse.platform:org.eclipse.ui.genericeditor:1.1.0')
    implementation('org.eclipse.platform:org.eclipse.core.filebuffers:3.6.200')
    implementation('org.eclipse.platform:org.eclipse.core.resources:3.13.0')
    implementation('org.eclipse.platform:org.eclipse.ui.views:3.9.100')

    // Use TestNG framework, also requires calling test.useTestNG() below
    testImplementation 'org.testng:testng:7.0.0'
}

jar.doFirst {
     manifest {
          def manifestFile = "${projectDir}/META-INF/MANIFEST.MF"
          if (new File(manifestFile).exists()) from (manifestFile);
     }
}
sourceSets {
     main {
          resources {
               srcDir '.'
               include "plugin.xml"
               include "icons/*"
          }
     }
}

task tag {
     doLast {
          def manifestFile = "META-INF/MANIFEST.MF"
          def stdout = new ByteArrayOutputStream();
          exec {
               executable 'sed'
               args '-n', 's/^Bundle-Version: \\(.*\\)$/\\1/p', manifestFile
               standardOutput = stdout
          }
          def oldVersion = stdout.toString().trim();
          def nextVersion = null
          def mainVersion = oldVersion.find(~/(\d+.\d+).(\d+)/) { match, major, minor ->
               nextVersion = major + "." + (Integer.parseInt(minor) + 1);
               return match
          }
          def projetTagName = projectName + "-" + mainVersion 
          println "tag de " + projectName + " to " + projetTagName
          
          println "L'ancienne version est $oldVersion"
          assert !oldVersion.isEmpty()
          assert nextVersion != null && !nextVersion.isEmpty()
          println "La nouvelle version est $nextVersion"
          
          exec {
               executable 'sed'
               args '-ie', 's/^\\(Bundle-Version: \\).*$/\\1' + nextVersion + '/g', manifestFile
          }               
          def messageTag = "[TAG] tag de " + projetTagName
          exec {
               executable "git"
               args "tag", "-a", projetTagName, "-m", messageTag
          }
          
          exec {
             executable "git"
             args "add", manifestFile
          }
          def commitMessage = "[TAG] Changement de version " + mainVersion + " -> " + nextVersion;
          exec {
               executable "git"
               args "commit", "-m", commitMessage
          }
          
          exec {
            executable "git"
            args "push", "--follow-tags"
          }
     }
}

test {
    // Use TestNG for unit tests
    useTestNG()
}
